const kafka = require('./config');
const { sendEmail, formatPhoneEmail } = require('../services/emailService');

const consumer = kafka.consumer({ groupId: 'phone-shop-group' });

// –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const notificationService = {
    sendEmail: async (data) => {
        try {
            console.log('üìß –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', data);
            const html = formatPhoneEmail(data);
            await sendEmail(
                process.env.NOTIFICATION_EMAIL,
                '–ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ',
                html
            );
            console.log('‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }
};

const analyticsService = {
    updateStats: (data) => {
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', data);
    }
};

const logisticsService = {
    planStorage: (data) => {
        console.log('üöö –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ:', data);
    }
};

const inventoryService = {
    updateInventory: (data) => {
        console.log('üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', data);
    }
};

const messageHandlers = {
    PHONE_CREATED: async (data) => {
        console.log('üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è PHONE_CREATED:', data);
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
        await Promise.all([
            notificationService.sendEmail(data),
            analyticsService.updateStats(data),
            logisticsService.planStorage(data),
            inventoryService.updateInventory(data)
        ]);
        console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ PHONE_CREATED –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
    },
    PHONE_UPDATED: async (data) => {
        console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è PHONE_UPDATED:', data);
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
        await Promise.all([
            analyticsService.updateStats(data),
            inventoryService.updateInventory(data)
        ]);
        console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ PHONE_UPDATED –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
    },
    PHONE_DELETED: async (data) => {
        console.log('üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è PHONE_DELETED:', data);
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
        await Promise.all([
            notificationService.sendEmail(data),
            analyticsService.updateStats(data),
            inventoryService.updateInventory(data)
        ]);
        console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ PHONE_DELETED –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');L
    }
};

const initConsumer = async (topic) => {
    try {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è consumer...');
        await consumer.connect();
        console.log('‚úÖ Consumer –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Kafka');
        
        await consumer.subscribe({ topic, fromBeginning: true });
        console.log(`üì• Consumer –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ç–æ–ø–∏–∫: ${topic}`);

        await consumer.run({
            eachMessage: async ({ topic, partition, message }) => {
                try {
                    console.log(`\nüì® –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–æ–ø–∏–∫–∞ ${topic}:`);
                    const event = JSON.parse(message.value.toString());
                    console.log('üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', event);
                    
                    if (messageHandlers[event.type]) {
                        await messageHandlers[event.type](event.payload);
                    } else {
                        console.warn(`‚ö†Ô∏è –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è —Ç–∏–ø–∞: ${event.type}`);
                    }
                    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ\n');
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                }
            },
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ consumer:', error);
        throw error;
    }
};

module.exports = {
    initConsumer
};
