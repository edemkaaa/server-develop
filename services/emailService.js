const nodemailer = require('nodemailer');
const { google } = require('googleapis');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = ['EMAIL_USER', 'EMAIL_PASSWORD', 'NOTIFICATION_EMAIL'];
requiredEnvVars.forEach(varName => {
    if (!process.env[varName]) {
        console.error(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ${varName}`);
        console.log('–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è env:', {
            EMAIL_USER: process.env.EMAIL_USER,
            NOTIFICATION_EMAIL: process.env.NOTIFICATION_EMAIL,
        });
    }
});

// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASSWORD
    },
    tls: {
        rejectUnauthorized: false
    }
});

const sendEmail = async (to, subject, html) => {
    try {
        if (!process.env.EMAIL_USER || !process.env.EMAIL_PASSWORD) {
            throw new Error('EMAIL_USER –∏–ª–∏ EMAIL_PASSWORD –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ');
        }

        if (!to) {
            throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å email (to)');
        }

        console.log('üìß –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', {
            from: process.env.EMAIL_USER,
            to,
            subject
        });

        const mailOptions = {
            from: {
                name: 'Phone Shop API',
                address: process.env.EMAIL_USER
            },
            to,
            subject,
            html,
            headers: {
                'priority': 'high'
            }
        };

        console.log('üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ email:', {
            from: mailOptions.from,
            to: mailOptions.to,
            subject: mailOptions.subject,
            headers: mailOptions.headers
        });

        // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        let retries = 3;
        let lastError;

        while (retries > 0) {
            try {
                const info = await transporter.sendMail(mailOptions);
                console.log('üì® Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', {
                    messageId: info.messageId,
                    response: info.response,
                    accepted: info.accepted,
                    rejected: info.rejected
                });
                return info;
            } catch (error) {
                lastError = error;
                console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${4 - retries} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error.message);
                retries--;
                if (retries > 0) {
                    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }
            }
        }

        throw lastError;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', {
            name: error.name,
            message: error.message,
            code: error.code,
            command: error.command,
            response: error.response,
            responseCode: error.responseCode,
            stack: error.stack
        });
        throw error;
    }
};

const formatPhoneEmail = (phone) => {
    return `
        <h2 style="color: #2c3e50;">–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω!</h2>
        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 5px;">
            <p style="color: #34495e;">–í –º–∞–≥–∞–∑–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:</p>
            <ul style="list-style-type: none; padding: 0;">
                <li style="margin: 10px 0;"><strong style="color: #2c3e50;">–ë—Ä–µ–Ω–¥:</strong> <span style="color: #34495e;">${phone.brand}</span></li>
                <li style="margin: 10px 0;"><strong style="color: #2c3e50;">–ú–æ–¥–µ–ª—å:</strong> <span style="color: #34495e;">${phone.model}</span></li>
                <li style="margin: 10px 0;"><strong style="color: #2c3e50;">–¶–µ–Ω–∞:</strong> <span style="color: #34495e;">$${phone.price}</span></li>
                <li style="margin: 10px 0;"><strong style="color: #2c3e50;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:</strong> <span style="color: #34495e;">${phone.stock}</span></li>
            </ul>
        </div>
        <p style="color: #7f8c8d; font-size: 12px; margin-top: 20px;">–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Phone Shop API</p>
    `;
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
(async () => {
    try {
        await transporter.verify();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É —É—Å–ø–µ—à–Ω–æ');
        console.log('üìß Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', {
            user: process.env.EMAIL_USER,
            notification_email: process.env.NOTIFICATION_EMAIL,
            service: 'gmail'
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É:', {
            name: error.name,
            message: error.message,
            code: error.code,
            command: error.command,
            response: error.response,
            responseCode: error.responseCode
        });
    }
})();

module.exports = {
    sendEmail,
    formatPhoneEmail
};
